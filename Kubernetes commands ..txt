Pods
Pods are the smallest deployable units of computing that you can create and manage in Kubernetes.

A Pod (as in a pod of whales or pea pod) is a group of one or more containers, with shared storage and network resources, and a specification for how to run the containers. A Pod's contents are always co-located and co-scheduled, and run in a shared context. A Pod models an application-specific "logical host": it contains one or more application containers which are relatively tightly coupled. In non-cloud contexts, applications executed on the same physical or virtual machine are analogous to cloud applications executed on the same logical host.

As well as application containers, a Pod can contain init containers that run during Pod startup. You can also inject ephemeral containers for debugging a running Pod.

What is


creating fisrt pod 

vi my-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80

kubectl apply -f my-pod.yml

Here are some examples of workload resources that manage one or more Pods:

Deployment
StatefulSet
DaemonSet
Pod templates 




Kubernetes commands .


Kubectl Command Cheatsheet

Cluster Management

kubectl cluster-info 

Display the Kubernetes version running on the client and server

kubectl version 

Get the configuration of the cluster

kubectl config view 

List the API resources that are available

kubectl api-resoreces 

List the API versions that are available
kubectl api-version

List everything

kubectl get all --all-namespace 

A DaemonSet ensures that all (or some) Nodes run a copy of a Pod. As nodes are added to the cluster, Pods are added to them. As nodes are removed from the cluster, those Pods are garbage collected. Deleting a DaemonSet will clean up the Pods it created.

Some typical uses of a DaemonSet are:

running a cluster storage daemon on every node
running a logs collection daemon on every node
running a node monitoring daemon on every node
In a simple case, one DaemonSet, covering all nodes, would be used for each type of daemon. A more complex setup might use multiple DaemonSets for a single type of daemon, but with different flags and/or different memory and cpu requests for different hardware types.

Writing a DaemonSet 


kubctl logs pad_name 


Get logs from a service and optionally select which container

kubectl logs -f <service_name> -c $container


kubectl get pod -o wide 

kubectl get pods -n=[namespace_name]













